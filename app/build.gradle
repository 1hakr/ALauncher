apply plugin: 'com.android.application'
apply plugin: 'com.google.protobuf'

def props = new Properties()
File keystoreProperties = rootProject.file("keystore.properties")
if (keystoreProperties.exists()) {
    props.load(new FileInputStream(keystoreProperties))
} else {
    props['keystorefile'] = 'none';
}

def useGoogleServices = true

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        testApplicationId 'dev.dworks.apps.alauncher.tests'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionName rootProject.generateVersionName()
        versionCode rootProject.generateVersionCode(1)
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "PLAYSTORE_LICENSE_KEY",  "$props.PLAYSTORE_LICENSE_KEY"
        buildConfigField "String", "MERCHANT_ID",  "$props.MERCHANT_ID"
    }
    signingConfigs {
        release
    }
    buildTypes {
        debug {
            useGoogleServices = false
            minifyEnabled false
            shrinkResources false
            applicationIdSuffix ".debug"
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard.pro'
        }
    }
    flavorDimensions "release", "default"
    productFlavors {
        free {
            applicationId "dev.dworks.apps.alauncher"
            dimension "default"
        }
        pro {
            useGoogleServices = false
            applicationId "dev.dworks.apps.alauncher.pro"
            dimension "default"
        }
        google {
            dimension "release"
        }
        amazon {
            dimension "release"
            targetSdkVersion 25
            versionCode 9
        }
        other {
            dimension "release"
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'mockito-extensions/org.mockito.plugins.MockMaker'
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation 'androidx.dynamicanimation:dynamicanimation:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.palette:palette:1.0.0'
    implementation 'com.google.protobuf.nano:protobuf-javanano:3.2.0rc2'
    implementation 'com.google.firebase:firebase-core:17.4.2'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'
    implementation 'com.zsoltsafrany:needle:1.0.0'
    googleImplementation 'com.anjlab.android.iab.v3:library:1.1.0'
    amazonImplementation 'com.github.eggheadgames:android-in-app-payments:1.2.8'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'org.mockito:mockito-core:2.23.0'
    androidTestImplementation 'com.google.dexmaker:dexmaker:1.2'
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'androidx.annotation:annotation:1.1.0'
}

protobuf {
    // Configure the protoc executable
    protoc {
        artifact = 'com.google.protobuf:protoc:3.0.0'

        generateProtoTasks {
            all().each { task ->
                task.builtins {
                    remove java
                    javanano {
                        option "java_package=launcher_log_extension.proto|com.android.launcher3.userevent.nano"
                        option "java_package=launcher_log.proto|com.android.launcher3.userevent.nano"
                        option "java_package=launcher_dump.proto|com.android.launcher3.model.nano"
                        option "java_package=search.proto|com.google.android.apps.nexuslauncher.search.nano"
                        option "java_package=smartspace.proto|com.google.android.apps.nexuslauncher.smartspace.nano"
                        option "enum_style=java"
                    }
                }
            }
        }
    }
}

android.signingConfigs.release.storeFile rootProject.file(props.keyStore)
android.signingConfigs.release.storePassword props.keyStorePassword
android.signingConfigs.release.keyAlias props.keyAlias
android.signingConfigs.release.keyPassword props.keyAliasPassword

if (useGoogleServices) {
    apply plugin: 'com.google.gms.google-services'
    apply plugin: 'io.fabric'
}